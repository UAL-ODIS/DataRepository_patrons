from os import path
from os import mkdir

from datetime import date

import configparser
import argparse

# For LDAP query
from requiam.ldap_query import LDAPConnection

# Org Code related
from requiam.org_code_numbers import get_numbers

# Logging
from requiam.logger import LogClass
from requiam import TimerClass

# Version and branch info
from requiam import __version__
from requiam.get_branch_name import get_active_branch_name
from requiam import __file__ as library_path

today = date.today()

library_root_path = path.dirname(path.dirname(library_path))  # Retrieve parent directory to requiam


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Command-line driver for Organization Code summary information.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--persistent_path', required=True, help='full parent path for logs')
    parser.add_argument('--ldap_host', help='LDAP host')
    parser.add_argument('--ldap_base_dn', help='base DN for LDAP bind and query')
    parser.add_argument('--ldap_user', help='user name for LDAP login')
    parser.add_argument('--ldap_password', help='password for LDAP login')
    parser.add_argument('--org_url', help='URL that exports CSV file with organizational code ')
    parser.add_argument('--debug', action='store_true', help='turn on debug logging')
    args = parser.parse_args()

    branch_name = get_active_branch_name(library_root_path)

    banner_message = f"""
    This is the command-line tool that queries EDS to retrieve UAL patron
    membership based on organization codes.

    ReQUIAM active branch: {branch_name}
    ReQUIAM version: {__version__}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/ualibraries/ReQUIAM/issues/new
    """
    print(banner_message)

    main_timer = TimerClass()
    main_timer._start()

    config = configparser.ConfigParser()
    config.read(args.config)

    # Define logfile
    log_dir = path.join(args.persistent_path, config.get('global', 'log_dir'))

    if not path.exists(log_dir):
        mkdir(log_dir)
    logfile = "org_code_numbers.{}.log".format(today.strftime("%Y-%m-%d"))

    log = LogClass(log_dir, logfile).get_logger()

    log.info("****************************************")
    log.info("Started get_org_code_numbers script ... ")
    log.info(f"ReQUIAM active branch: {branch_name}")
    log.info(f"ReQUIAM version: {__version__}")

    cred_err = 0
    vargs = vars(args)
    for p in ['ldap_host', 'ldap_base_dn', 'ldap_user', 'ldap_password']:

        if (p in vargs) and (vargs[p] is not None):
            vargs[p] = vargs[p]
        elif (p in config['global']) and (config['global'][p] is not None) and \
                (config['global'][p] != "***override***"):
            vargs[p] = config['global'][p]
        else:
            vargs[p] = '(unset)'

        if p in ['ldap_user', 'ldap_password']:
            if vargs[p] is '(unset)':
                log.info('   {0: >17} = (unset)'.format(p))
                cred_err += 1
            else:
                log.info('   {0: >17} = (set)'.format(p))
        else:
            log.info('   {0: >17} = {1:}'. format(p, vargs[p]))

    if cred_err:
        log.warning("Not all credentials available!")
        log.warning("Exiting")
        raise ValueError

    for p in ['org_url']:
        if (p in vargs) and (vargs[p] is not None):
            vargs[p] = vargs[p]
        elif (p in config['google']) and (config['google'][p] is not None) and \
                (config['google'][p] != "***override***"):
            vargs[p] = config['google'][p]
        else:
            vargs[p] = '(unset)'

    ldc = LDAPConnection(ldap_host=vargs['ldap_host'],
                         ldap_base_dn=vargs['ldap_base_dn'],
                         ldap_user=vargs['ldap_user'],
                         ldap_password=vargs['ldap_password'], log=log)

    get_numbers(ldc, vargs['org_url'], log)

    main_timer._stop()
    log.info(main_timer.format)

    log.info("***********************")
    log.info("Exit 0")
