#!/user/bin/env python

from os import path
from os import mkdir

from datetime import date

import configparser
import argparse

from requiam import ldap_query
from requiam.grouper_query import grouper_delta_user
from requiam.logger import LogClass
from requiam import TimerClass
from requiam.manual_override import ManualOverride, get_current_groups

today = date.today()

co_filename = __file__
co_dir = path.dirname(co_filename)


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for simple user EDS updates.')
    parser.add_argument('--netid', required=True, help='NetID for user')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--ldap_host', help='LDAP host')
    parser.add_argument('--ldap_base_dn', help='base DN for LDAP bind and query')
    parser.add_argument('--ldap_user', help='user name for LDAP login')
    parser.add_argument('--ldap_password', help='password for LDAP login')
    parser.add_argument('--grouper_host', help='Grouper host')
    parser.add_argument('--grouper_base_path', help='base path for Grouper API')
    parser.add_argument('--grouper_user', help='user name for Grouper login')
    parser.add_argument('--grouper_password', help='password for Grouper login')
    parser.add_argument('--batch_size', help='synchronization batch size')
    parser.add_argument('--batch_timeout', help='synchronization batch timeout in seconds')
    parser.add_argument('--batch_delay', help='delay between batches in seconds')
    parser.add_argument('--portal', help='Specifies portal change')
    parser.add_argument('--quota', help='Specifies quota change')
    parser.add_argument('--portal_file', help='filename for manual-override portal file')
    parser.add_argument('--quota_file', help='filename for manual-override quota file')
    parser.add_argument('--sync', action='store_true', help='perform synchronization')
    parser.add_argument('--sync_max', help='maximum membership delta to allow when synchronizing')
    parser.add_argument('--debug', action='store_true', help='turn on debug logging')
    args = parser.parse_args()

    main_timer = TimerClass()
    main_timer._start()

    config = configparser.ConfigParser()
    config.read(args.config)

    # Define logfile
    log_dir = config.get('global', 'log_dir')
    if not path.exists(log_dir):
        mkdir(log_dir)
    logfile = f"user_update.{today.strftime('%Y-%m-%d')}.log"

    log = LogClass(log_dir, logfile).get_logger()

    log.info("Started user_update")

    cred_err = 0
    vargs = vars(args)
    for p in ['netid', 'ldap_host', 'ldap_base_dn', 'ldap_user', 'ldap_password',
              'grouper_host', 'grouper_base_path', 'grouper_user', 'grouper_password',
              'batch_size', 'batch_timeout', 'batch_delay', 'portal', 'quota',
              'portal_file', 'quota_file', 'sync_max']:

        if (p in vargs) and (vargs[p] is not None):
            vargs[p] = vargs[p]
        elif (p in config['global']) and (config['global'][p] is not None) and \
                (config['global'][p] != "***override***"):
            vargs[p] = config['global'][p]
        else:
            vargs[p] = '(unset)'

        if p in ['ldap_user', 'ldap_password', 'grouper_user', 'grouper_password']:
            if vargs[p] is '(unset)':
                log.info('   {0: >17} = (unset)'.format(p))
                cred_err += 1
            else:
                log.info('   {0: >17} = (set)'.format(p))
        else:
            log.info('   {0: >17} = {1:}'. format(p, vargs[p]))

    if cred_err:
        log.warning("Not all credentials available!")
        log.warning("Exiting")
        raise ValueError

    log.info('     sync = %s', args.sync)
    log.info('    debug = %s', args.debug)

    ldap_dict = dict(ldap_host=vargs['ldap_host'],
                     ldap_base_dn=vargs['ldap_base_dn'],
                     ldap_user=vargs['ldap_user'],
                     ldap_password=vargs['ldap_password'])

    grouper_dict = dict(grouper_host=vargs['grouper_host'],
                        grouper_base_path=vargs['grouper_base_path'],
                        grouper_user=vargs['grouper_user'],
                        grouper_password=vargs['grouper_password'])

    delta_dict = dict(batch_size=int(vargs['batch_size']),
                      batch_timeout=int(vargs['batch_timeout']),
                      batch_delay=int(vargs['batch_delay']),
                      sync_max=int(vargs['sync_max']))

    # Manual override class
    mo = ManualOverride(vargs['portal_file'], vargs['quota_file'], log)

    # Initiate LDAP connection
    ldc = ldap_query.LDAPConnection(**ldap_dict)

    # Get uaid based on NetID (uid)
    uid_query = ldap_query.uid_query(vargs['netid'])
    user_uaid = ldap_query.ldap_search(ldc, uid_query)
    if len(user_uaid) == 0:
        log.warning("netid not found!")
        raise ValueError

    log.info(f" uaid for {vargs['netid']} : {list(user_uaid)[0]}")

    # Retrieve ismemberof figshare information
    current_dict = get_current_groups(vargs['netid'], ldap_dict, log)

    # Portal update
    if vargs['portal'] != '(unset)':
        # First remove from current portal group
        if current_dict['portal'] == '':
            log.info("Currently not assigned to a portal. Skipping removal")
        else:
            log.info(f"Removing from current {current_dict['portal']} portal")

            d = grouper_delta_user(current_dict['portal'], 'portal',
                                   vargs['netid'], user_uaid, 'remove',
                                   grouper_dict, delta_dict, log)

            log.info(f"ldap and grouper have {len(d.common)} members in common")
            log.info(f"synchronization will drop {len(d.drops)} entries from Grouper {current_dict['portal']} group")
            log.info(f"synchronization will add {len(d.adds)} entries to Grouper {current_dict['portal']} group")

            if args.sync:
                log.info('synchronizing ...')
                d.synchronize()
            else:
                log.info('dry run, not performing synchronization')

        # Add to new portal group
        if vargs['portal'] != 'root':
            log.info(f"Adding to {vargs['portal']} portal")

            d = grouper_delta_user(vargs['portal'], 'portal',
                                   vargs['netid'], user_uaid, 'add',
                                   grouper_dict, delta_dict, log)

            log.info(f"ldap and grouper have {len(d.common)} members in common")
            log.info(f"synchronization will drop {len(d.drops)} entries to Grouper {vargs['portal']} group")
            log.info(f"synchronization will add {len(d.adds)} entries to Grouper {vargs['portal']} group")

            if args.sync:
                log.info('synchronizing ...')
                d.synchronize()

                # Update manual CSV file
                mo.update_dataframe(vargs['netid'], user_uaid, vargs['portal'], 'portal')
            else:
                log.info('dry run, not performing synchronization')
        else:
            # Remove entry from manual CSV file for 'root' case
            mo.update_dataframe(vargs['netid'], user_uaid, vargs['portal'], 'portal')

    # Quota update
    if vargs['quota'] != '(unset)':
        # First remove from current quota group
        if current_dict['quota'] == '':
            log.info("Currently not assigned to a quota. Skipping removal")
        else:
            log.info(f"Removing from current {current_dict['quota']} quota")

            d = grouper_delta_user(current_dict['quota'], 'quota',
                                   vargs['netid'], user_uaid, 'remove',
                                   grouper_dict, delta_dict, log)

            log.info(f"ldap and grouper have {len(d.common)} members in common")
            log.info(f"synchronization will drop {len(d.drops)} entries from Grouper {current_dict['quota']} group")
            log.info(f"synchronization will add {len(d.adds)} entries to Grouper {current_dict['quota']} group")

            if args.sync:
                log.info('synchronizing ...')
                d.synchronize()
            else:
                log.info('dry run, not performing synchronization')

        # Add to new quota group
        log.info(f"Updating {vargs['quota']} quota")

        d = grouper_delta_user(vargs['quota'], 'quota',
                               vargs['netid'], user_uaid, 'add',
                               grouper_dict, delta_dict, log)

        log.info(f"ldap and grouper have {len(d.common)} members in common")
        log.info(f"synchronization will drop {len(d.drops)} entries from Grouper {vargs['quota']} group")
        log.info(f"synchronization will add {len(d.adds)} entries to Grouper {vargs['quota']} group")

        if args.sync:
            log.info('synchronizing ...')
            d.synchronize()

            # Update manual CSV file
            mo.update_dataframe(vargs['netid'], user_uaid, vargs['quota'], 'quota')
        else:
            log.info('dry run, not performing synchronization')
